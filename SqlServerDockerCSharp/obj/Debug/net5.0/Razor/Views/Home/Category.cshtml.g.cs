#pragma checksum "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e0600101b6793b3beb3bb079a7f223efae81dfda"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Category), @"mvc.1.0.razor-page", @"/Views/Home/Category.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/_ViewImports.cshtml"
using SqlServerDockerCSharp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/_ViewImports.cshtml"
using SqlServerDockerCSharp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e0600101b6793b3beb3bb079a7f223efae81dfda", @"/Views/Home/Category.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f680bf2f46c1ee2d2e399761ca495ce1e856b32d", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Category : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
  
    //prevent cache problem
    Random random = new Random();
    int num = random.Next(1000);
    List<Category> categories = new();
    try
    {
        var db = new SolarContext();
        categories = db.Categorys.ToList();
    }
    catch (Exception ex)
    {
        System.Diagnostics.Debug.WriteLine(ex.Message);
        // suppose we need a library  nooo way ..  later :P
        //    var logWriter = new System.IO.StreamWriter(ViewBag.mapPath);
        //     logWriter.WriteLine("Log message :" + ex.Message);
        //     logWriter.Dispose();
    }
    var notification = "";

    if (ViewBag.notification != null)
    {
        if (ViewBag.notification.Length > 0)
        {
            notification = ViewBag.notification;
        }
    }
    var stringNotification = "";
    switch (notification)
    {
        case "createSuccess":
            stringNotification = "You have create a record";
            break;
        case "updateSuccess":
            stringNotification = "You have updated a record";
            break;
        case "deleteSuccess":
            stringNotification = "You have delete a record";
            break;
    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
 if (stringNotification.Length > 0)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div class=\"alert alert-primary\" role=\"alert\">\n        ");
#nullable restore
#line 46 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
   Write(stringNotification);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n    </div>\n");
#nullable restore
#line 48 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<table class=""table table-striped"">
    <thead class=""table-light"">
        <tr>
            <th>#</th>
            <td>
                <input style=""text-align: right"" class=""form-control"" id=""CategoryDescription"" type=""text"" />
            </td>
            <td>
                <button type=""button"" class=""btn btn-success"" onclick=""createRecord()"">
                    <i class=""bi bi-plus-circle""></i>
                    NEW
                </button>
            </td>
        </tr>
        <tr>
            <th scope=""col"">ID</th>
            <th scope=""col"">DESCRIPTION</th>
        </tr>
    </thead>
    <tbody>


");
#nullable restore
#line 71 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
         foreach (var item in categories)
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <tr>\n                <th scope=\"row\">\n                    ");
#nullable restore
#line 75 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
               Write(item.CategoryId);

#line default
#line hidden
#nullable disable
            WriteLiteral("\n                </th>\n                <td>\n                    <input class=\"form-control\"");
            BeginWriteAttribute("id", " id=\"", 2154, "\"", 2195, 2);
#nullable restore
#line 78 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
WriteAttributeValue("", 2159, item.CategoryId, 2159, 16, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 2175, "-CategoryDescription", 2175, 20, true);
            EndWriteAttribute();
            WriteLiteral(" type=\"text\"");
            BeginWriteAttribute("value", "\n                           value=\"", 2208, "\"", 2268, 1);
#nullable restore
#line 79 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
WriteAttributeValue("", 2243, item.CategoryDescription, 2243, 25, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n                </td>\n                <td>\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"Form Button\">\n                        <button type=\"button\" class=\"btn btn-warning\"");
            BeginWriteAttribute("onclick", " onclick=\"", 2467, "\"", 2507, 3);
            WriteAttributeValue("", 2477, "updateRecord(", 2477, 13, true);
#nullable restore
#line 83 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
WriteAttributeValue("", 2490, item.CategoryId, 2490, 16, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 2506, ")", 2506, 1, true);
            EndWriteAttribute();
            WriteLiteral(">\n                            <i class=\"bi bi-file-earmark-text\"></i>\n                            UPDATE\n                        </button>\n                        <button type=\"button\" class=\"btn btn-danger\"");
            BeginWriteAttribute("onclick", "\n                                onclick=\"", 2715, "\"", 2787, 3);
            WriteAttributeValue("", 2757, "deleteRecord(", 2757, 13, true);
#nullable restore
#line 88 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
WriteAttributeValue("", 2770, item.CategoryId, 2770, 16, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 2786, ")", 2786, 1, true);
            EndWriteAttribute();
            WriteLiteral(">\n                            <i class=\"bi bi-trash\"></i>\n                            DELETE\n                        </button>\n                    </div>\n                </td>\n            </tr>\n");
#nullable restore
#line 95 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("    </tbody>\n</table>\n<script>// at here we try to be native as possible and you can use url to ease change the which one you prefer\n    let url = \"https://localhost:5001/api/category\"; // api url\n    let home = \"");
#nullable restore
#line 100 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
           Write(Url.RouteUrl(ViewContext.RouteData.Values));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
    function createRecord() {
        const xmlHttpRequest = new XMLHttpRequest();
        xmlHttpRequest.open(""POST"", url);
        xmlHttpRequest.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");
        xmlHttpRequest.onreadystatechange = function () {
            if (xmlHttpRequest.readyState === 4) {
                if (xmlHttpRequest.status === 200) {
                    console.log(""Request 200 : "" + xmlHttpRequest.responseText)
                    const obj = JSON.parse(xmlHttpRequest.responseText);
                    if (obj.code === 101) {
                        console.log(""Create Success"")
                        location.assign(home + ""?notification=createSuccess&rand=");
#nullable restore
#line 112 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
                                                                            Write(num);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""")
                        return false;
                    } else {
                        // popup saying error
                        console.log(""error message : "" + obj.message + ""Error Code : "" + obj.code)
                    }
                } else {
                    console.log(""Error"", xmlHttpRequest.statusText);
                }
            }
        }
        xmlHttpRequest.send(""&mode=create&CategoryDescription="" + document.getElementById(""CategoryDescription"").value);

    }

    function updateRecord(categoryId) {
        const xmlHttpRequest = new XMLHttpRequest();
        xmlHttpRequest.open(""POST"", url);
        xmlHttpRequest.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");
        xmlHttpRequest.onreadystatechange = function () {
            if (xmlHttpRequest.readyState === 4) {
                if (xmlHttpRequest.status === 200) {
                    console.log(""Request 200 : "" + xmlHttpRequest.responseText)
                    const obj = JSON.parse(xmlHttpR");
            WriteLiteral("equest.responseText);\n                    if (obj.code === 301) {\n                        console.log(\"Update Success\")\n                        location.assign(home + \"?notification=updateSuccess&rand=");
#nullable restore
#line 138 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
                                                                            Write(num);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"&date="" + new Date().getTime())
                        return false;
                    } else {
                        // popup saying error
                        console.log(""error message : "" + obj.message + ""Error Code : "" + obj.code)
                    }

                } else {
                    console.log(""Error"", xmlHttpRequest.statusText);
                }
            }
        }
        xmlHttpRequest.send(""&mode=update&CategoryId="" + categoryId + ""&CategoryDescription="" + document.getElementById(categoryId + ""-CategoryDescription"").value);

    }

    function deleteRecord(CategoryId) {
        const xmlHttpRequest = new XMLHttpRequest();
        xmlHttpRequest.open(""POST"", url);
        xmlHttpRequest.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");
        xmlHttpRequest.onreadystatechange = function () {
            if (xmlHttpRequest.readyState === 4) {
                if (xmlHttpRequest.status === 200) {
                    console.log(""Request 200 : "" + xmlHtt");
            WriteLiteral(@"pRequest.responseText)
                    const obj = JSON.parse(xmlHttpRequest.responseText);
                    if (obj.code === 401) {
                        console.log(""Delete Success"")
                        location.assign(home + ""?miau=1&notification=deleteSuccess&rand=");
#nullable restore
#line 165 "/Users/user/Projects/SqlServerDockerCSharp/SqlServerDockerCSharp/Views/Home/Category.cshtml"
                                                                                   Write(num);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""")
                        return false;
                    } else {
                        // popup saying error
                        console.log(""error message : "" + obj.message + ""Error Code : "" + obj.code)
                    }
                } else {
                    console.log(""Error"", xmlHttpRequest.statusText);
                }
            }
        }
        xmlHttpRequest.send(""&mode=delete&CategoryId="" + CategoryId);

    }</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Views_Home_Category> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Views_Home_Category> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Views_Home_Category>)PageContext?.ViewData;
        public Views_Home_Category Model => ViewData.Model;
    }
}
#pragma warning restore 1591
